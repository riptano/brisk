#! /bin/sh
### BEGIN INIT INFO
# Provides:          brisk
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: distributed storage system for structured data
# Description:       Cassandra is a distributed (peer-to-peer) system for
#                    the management and storage of structured data.
### END INIT INFO


DESC="Brisk daemon"
NAME=brisk
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
CONFDIR=/etc/brisk/cassandra
WAIT_FOR_START=10
HADOOP_ENABLED=0
BRISK_CMD="/usr/bin/brisk cassandra -p $PIDFILE"

# The first existing directory is used for JAVA_HOME if needed.
JVM_SEARCH_DIRS="/usr/lib/jvm/java-6-sun"

[ -e /usr/share/brisk/brisk.jar ] || exit 0
[ -e /etc/brisk/brisk-env.sh ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# redhat init functions
[ -r /etc/init.d/functions ] || { echo 'Initscript functions not found!' >&2; exit 1; }
. /etc/init.d/functions

# If JAVA_HOME has not been set, try to determine it.
if [ -z "$JAVA_HOME" ]; then
    # If java is in PATH, use a JAVA_HOME that corresponds to that. This is
    # both consistent with how the upstream startup script works, and how
    # Debian works (read: the use of alternatives to set a system JVM).
    if [ -n `which java` ]; then
        java=`which java`
        # Dereference symlink(s)
        while true; do
            if [ -h "$java" ]; then
                java=`readlink "$java"`
                continue
            fi
            break
        done
        JAVA_HOME="`dirname $java`/../"
    # No JAVA_HOME set and no java found in PATH, search for a JVM.
    else
        for jdir in $JVM_SEARCH_DIRS; do
            if [ -x "$jdir/bin/java" ]; then
                JAVA_HOME="$jdir"
                break
            fi
        done
    fi
fi

#
# Function that returns 0 if process is running, or nonzero if not.
#
# The nonzero value is 3 if the process is simply not running, and 1 if the
# process is not running but the pidfile exists (to match the exit codes for
# the "status" command; see LSB core spec 3.1, section 20.2)
#
is_running()
{
    status -p $PIDFILE "$NAME" > /dev/null 2>&1
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    is_running && return 1

    if [ "$HADOOP_ENABLED" = "0" ]; then
        echo "$DESC starting with Hadoop disabled (edit /etc/default/brisk to enable)"
    else
        BRISK_CMD="$BRISK_CMD -t -Djava.library.path=$JAVA_LIBRARY_PATH"
        echo "$DESC starting with Hadoop enabled (edit /etc/default/brisk to disable)"
    fi

    if [ -e $PIDFILE ]; then
        rm $PIDFILE
    fi
    touch $PIDFILE
    chown cassandra $PIDFILE
    su cassandra -c "$BRISK_CMD"

    is_running && return 0
    for tries in `seq $WAIT_FOR_START`; do
        sleep 1
        is_running && return 0
    done
    return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    echo -n "Stopping $NAME"
    killproc -p $PIDFILE $NAME 
    RETVAL="$?"
    echo
    [ "$RETVAL" = 2 ] && return 2
    rm -f "$PIDFILE"
    return "$RETVAL"
}

case "$1" in
 start)
    echo "Starting $DESC" "$NAME"
    do_start
    ;;
  stop)
    echo "Stopping $DESC" "$NAME"
    do_stop
    ;;
  restart|force-reload)
    echo "Restarting $DESC" "$NAME"
    do_stop
    [ $? -eq 0 ] && do_start
    ;;
  status)
    status -p $PIDFILE $NAME
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload|status}" >&2
    exit 3
    ;;
esac

:
